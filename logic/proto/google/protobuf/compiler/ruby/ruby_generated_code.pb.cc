// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/compiler/ruby/ruby_generated_code.proto

#include <google/protobuf/compiler/ruby/ruby_generated_code.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapBoolStringEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapInt32StringEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapInt64StringEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapStringBoolEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapStringEnumEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapStringInt32Entry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapStringStringEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapUint32StringEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapUint64StringEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_NestedMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto ::google::protobuf::internal::SCCInfo<10> scc_info_TestMessage;
}  // namespace protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto
namespace A {
namespace B {
namespace C {
class TestMessage_MapInt32StringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapInt32StringEntry_DoNotUse>
      _instance;
} _TestMessage_MapInt32StringEntry_DoNotUse_default_instance_;
class TestMessage_MapInt64StringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapInt64StringEntry_DoNotUse>
      _instance;
} _TestMessage_MapInt64StringEntry_DoNotUse_default_instance_;
class TestMessage_MapUint32StringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapUint32StringEntry_DoNotUse>
      _instance;
} _TestMessage_MapUint32StringEntry_DoNotUse_default_instance_;
class TestMessage_MapUint64StringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapUint64StringEntry_DoNotUse>
      _instance;
} _TestMessage_MapUint64StringEntry_DoNotUse_default_instance_;
class TestMessage_MapBoolStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapBoolStringEntry_DoNotUse>
      _instance;
} _TestMessage_MapBoolStringEntry_DoNotUse_default_instance_;
class TestMessage_MapStringStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapStringStringEntry_DoNotUse>
      _instance;
} _TestMessage_MapStringStringEntry_DoNotUse_default_instance_;
class TestMessage_MapStringMsgEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapStringMsgEntry_DoNotUse>
      _instance;
} _TestMessage_MapStringMsgEntry_DoNotUse_default_instance_;
class TestMessage_MapStringEnumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapStringEnumEntry_DoNotUse>
      _instance;
} _TestMessage_MapStringEnumEntry_DoNotUse_default_instance_;
class TestMessage_MapStringInt32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapStringInt32Entry_DoNotUse>
      _instance;
} _TestMessage_MapStringInt32Entry_DoNotUse_default_instance_;
class TestMessage_MapStringBoolEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_MapStringBoolEntry_DoNotUse>
      _instance;
} _TestMessage_MapStringBoolEntry_DoNotUse_default_instance_;
class TestMessage_NestedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage_NestedMessage>
      _instance;
} _TestMessage_NestedMessage_default_instance_;
class TestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestMessage>
      _instance;
  ::google::protobuf::int32 oneof_int32_;
  ::google::protobuf::int64 oneof_int64_;
  ::google::protobuf::uint32 oneof_uint32_;
  ::google::protobuf::uint64 oneof_uint64_;
  bool oneof_bool_;
  double oneof_double_;
  float oneof_float_;
  ::google::protobuf::internal::ArenaStringPtr oneof_string_;
  ::google::protobuf::internal::ArenaStringPtr oneof_bytes_;
  int oneof_enum_;
  const ::A::B::C::TestMessage* oneof_msg_;
} _TestMessage_default_instance_;
}  // namespace C
}  // namespace B
}  // namespace A
namespace protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto {
static void InitDefaultsTestMessage_MapInt32StringEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapInt32StringEntry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse();
  }
  ::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapInt32StringEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_MapInt32StringEntry_DoNotUse}, {}};

static void InitDefaultsTestMessage_MapInt64StringEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapInt64StringEntry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse();
  }
  ::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapInt64StringEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_MapInt64StringEntry_DoNotUse}, {}};

static void InitDefaultsTestMessage_MapUint32StringEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapUint32StringEntry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse();
  }
  ::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapUint32StringEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_MapUint32StringEntry_DoNotUse}, {}};

static void InitDefaultsTestMessage_MapUint64StringEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapUint64StringEntry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse();
  }
  ::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapUint64StringEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_MapUint64StringEntry_DoNotUse}, {}};

static void InitDefaultsTestMessage_MapBoolStringEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapBoolStringEntry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse();
  }
  ::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapBoolStringEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_MapBoolStringEntry_DoNotUse}, {}};

static void InitDefaultsTestMessage_MapStringStringEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapStringStringEntry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapStringStringEntry_DoNotUse();
  }
  ::A::B::C::TestMessage_MapStringStringEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapStringStringEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_MapStringStringEntry_DoNotUse}, {}};

static void InitDefaultsTestMessage_MapStringEnumEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapStringEnumEntry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse();
  }
  ::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapStringEnumEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_MapStringEnumEntry_DoNotUse}, {}};

static void InitDefaultsTestMessage_MapStringInt32Entry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapStringInt32Entry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse();
  }
  ::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapStringInt32Entry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_MapStringInt32Entry_DoNotUse}, {}};

static void InitDefaultsTestMessage_MapStringBoolEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapStringBoolEntry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse();
  }
  ::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_MapStringBoolEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_MapStringBoolEntry_DoNotUse}, {}};

static void InitDefaultsTestMessage_NestedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_NestedMessage_default_instance_;
    new (ptr) ::A::B::C::TestMessage_NestedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::A::B::C::TestMessage_NestedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestMessage_NestedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestMessage_NestedMessage}, {}};

static void InitDefaultsTestMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::A::B::C::_TestMessage_MapStringMsgEntry_DoNotUse_default_instance_;
    new (ptr) ::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse();
  }
  {
    void* ptr = &::A::B::C::_TestMessage_default_instance_;
    new (ptr) ::A::B::C::TestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse::InitAsDefaultInstance();
  ::A::B::C::TestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<10> scc_info_TestMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsTestMessage}, {
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_MapInt32StringEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_MapInt64StringEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_MapUint32StringEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_MapUint64StringEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_MapBoolStringEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_MapStringStringEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_MapStringEnumEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_MapStringInt32Entry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_MapStringBoolEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_NestedMessage.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_MapInt32StringEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_MapInt64StringEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_MapUint32StringEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_MapUint64StringEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_MapBoolStringEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_MapStringStringEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_MapStringEnumEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_MapStringInt32Entry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_MapStringBoolEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage_NestedMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestMessage.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage_NestedMessage, foo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, optional_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, repeated_msg_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_int32_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_int64_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_uint32_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_uint64_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_bool_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_double_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_float_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_string_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_bytes_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_enum_),
  offsetof(::A::B::C::TestMessageDefaultTypeInternal, oneof_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_int32_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_int64_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_uint32_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_uint64_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_bool_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_string_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_string_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_string_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_string_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, map_string_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, nested_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::A::B::C::TestMessage, my_oneof_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse)},
  { 9, 16, sizeof(::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse)},
  { 18, 25, sizeof(::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse)},
  { 27, 34, sizeof(::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse)},
  { 36, 43, sizeof(::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse)},
  { 45, 52, sizeof(::A::B::C::TestMessage_MapStringStringEntry_DoNotUse)},
  { 54, 61, sizeof(::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse)},
  { 63, 70, sizeof(::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse)},
  { 72, 79, sizeof(::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse)},
  { 81, 88, sizeof(::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse)},
  { 90, -1, sizeof(::A::B::C::TestMessage_NestedMessage)},
  { 96, -1, sizeof(::A::B::C::TestMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapInt32StringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapInt64StringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapUint32StringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapUint64StringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapBoolStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapStringStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapStringMsgEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapStringEnumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapStringInt32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_MapStringBoolEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_NestedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::A::B::C::_TestMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "google/protobuf/compiler/ruby/ruby_generated_code.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n7google/protobuf/compiler/ruby/ruby_gen"
      "erated_code.proto\022\005A.B.C\"\306\021\n\013TestMessage"
      "\022\026\n\016optional_int32\030\001 \001(\005\022\026\n\016optional_int"
      "64\030\002 \001(\003\022\027\n\017optional_uint32\030\003 \001(\r\022\027\n\017opt"
      "ional_uint64\030\004 \001(\004\022\025\n\roptional_bool\030\005 \001("
      "\010\022\027\n\017optional_double\030\006 \001(\001\022\026\n\016optional_f"
      "loat\030\007 \001(\002\022\027\n\017optional_string\030\010 \001(\t\022\026\n\016o"
      "ptional_bytes\030\t \001(\014\022&\n\roptional_enum\030\n \001"
      "(\0162\017.A.B.C.TestEnum\022(\n\014optional_msg\030\013 \001("
      "\0132\022.A.B.C.TestMessage\022\026\n\016repeated_int32\030"
      "\025 \003(\005\022\026\n\016repeated_int64\030\026 \003(\003\022\027\n\017repeate"
      "d_uint32\030\027 \003(\r\022\027\n\017repeated_uint64\030\030 \003(\004\022"
      "\025\n\rrepeated_bool\030\031 \003(\010\022\027\n\017repeated_doubl"
      "e\030\032 \003(\001\022\026\n\016repeated_float\030\033 \003(\002\022\027\n\017repea"
      "ted_string\030\034 \003(\t\022\026\n\016repeated_bytes\030\035 \003(\014"
      "\022&\n\rrepeated_enum\030\036 \003(\0162\017.A.B.C.TestEnum"
      "\022(\n\014repeated_msg\030\037 \003(\0132\022.A.B.C.TestMessa"
      "ge\022\025\n\013oneof_int32\030) \001(\005H\000\022\025\n\013oneof_int64"
      "\030* \001(\003H\000\022\026\n\014oneof_uint32\030+ \001(\rH\000\022\026\n\014oneo"
      "f_uint64\030, \001(\004H\000\022\024\n\noneof_bool\030- \001(\010H\000\022\026"
      "\n\014oneof_double\030. \001(\001H\000\022\025\n\013oneof_float\030/ "
      "\001(\002H\000\022\026\n\014oneof_string\0300 \001(\tH\000\022\025\n\013oneof_b"
      "ytes\0301 \001(\014H\000\022%\n\noneof_enum\0302 \001(\0162\017.A.B.C"
      ".TestEnumH\000\022\'\n\toneof_msg\0303 \001(\0132\022.A.B.C.T"
      "estMessageH\000\022@\n\020map_int32_string\030= \003(\0132&"
      ".A.B.C.TestMessage.MapInt32StringEntry\022@"
      "\n\020map_int64_string\030> \003(\0132&.A.B.C.TestMes"
      "sage.MapInt64StringEntry\022B\n\021map_uint32_s"
      "tring\030\? \003(\0132\'.A.B.C.TestMessage.MapUint3"
      "2StringEntry\022B\n\021map_uint64_string\030@ \003(\0132"
      "\'.A.B.C.TestMessage.MapUint64StringEntry"
      "\022>\n\017map_bool_string\030A \003(\0132%.A.B.C.TestMe"
      "ssage.MapBoolStringEntry\022B\n\021map_string_s"
      "tring\030B \003(\0132\'.A.B.C.TestMessage.MapStrin"
      "gStringEntry\022<\n\016map_string_msg\030C \003(\0132$.A"
      ".B.C.TestMessage.MapStringMsgEntry\022>\n\017ma"
      "p_string_enum\030D \003(\0132%.A.B.C.TestMessage."
      "MapStringEnumEntry\022@\n\020map_string_int32\030E"
      " \003(\0132&.A.B.C.TestMessage.MapStringInt32E"
      "ntry\022>\n\017map_string_bool\030F \003(\0132%.A.B.C.Te"
      "stMessage.MapStringBoolEntry\0228\n\016nested_m"
      "essage\030P \001(\0132 .A.B.C.TestMessage.NestedM"
      "essage\0325\n\023MapInt32StringEntry\022\013\n\003key\030\001 \001"
      "(\005\022\r\n\005value\030\002 \001(\t:\0028\001\0325\n\023MapInt64StringE"
      "ntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\t:\0028\001\0326\n\024"
      "MapUint32StringEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005val"
      "ue\030\002 \001(\t:\0028\001\0326\n\024MapUint64StringEntry\022\013\n\003"
      "key\030\001 \001(\004\022\r\n\005value\030\002 \001(\t:\0028\001\0324\n\022MapBoolS"
      "tringEntry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 \001(\t:\002"
      "8\001\0326\n\024MapStringStringEntry\022\013\n\003key\030\001 \001(\t\022"
      "\r\n\005value\030\002 \001(\t:\0028\001\032G\n\021MapStringMsgEntry\022"
      "\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.A.B.C.Test"
      "Message:\0028\001\032E\n\022MapStringEnumEntry\022\013\n\003key"
      "\030\001 \001(\t\022\036\n\005value\030\002 \001(\0162\017.A.B.C.TestEnum:\002"
      "8\001\0325\n\023MapStringInt32Entry\022\013\n\003key\030\001 \001(\t\022\r"
      "\n\005value\030\002 \001(\005:\0028\001\0324\n\022MapStringBoolEntry\022"
      "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\032\034\n\rNeste"
      "dMessage\022\013\n\003foo\030\001 \001(\005B\n\n\010my_oneof*,\n\010Tes"
      "tEnum\022\013\n\007Default\020\000\022\005\n\001A\020\001\022\005\n\001B\020\002\022\005\n\001C\020\003b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/protobuf/compiler/ruby/ruby_generated_code.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto
namespace A {
namespace B {
namespace C {
const ::google::protobuf::EnumDescriptor* TestEnum_descriptor() {
  protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_enum_descriptors[0];
}
bool TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

TestMessage_MapInt32StringEntry_DoNotUse::TestMessage_MapInt32StringEntry_DoNotUse() {}
TestMessage_MapInt32StringEntry_DoNotUse::TestMessage_MapInt32StringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapInt32StringEntry_DoNotUse::MergeFrom(const TestMessage_MapInt32StringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapInt32StringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[0];
}
void TestMessage_MapInt32StringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestMessage_MapInt64StringEntry_DoNotUse::TestMessage_MapInt64StringEntry_DoNotUse() {}
TestMessage_MapInt64StringEntry_DoNotUse::TestMessage_MapInt64StringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapInt64StringEntry_DoNotUse::MergeFrom(const TestMessage_MapInt64StringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapInt64StringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[1];
}
void TestMessage_MapInt64StringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestMessage_MapUint32StringEntry_DoNotUse::TestMessage_MapUint32StringEntry_DoNotUse() {}
TestMessage_MapUint32StringEntry_DoNotUse::TestMessage_MapUint32StringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapUint32StringEntry_DoNotUse::MergeFrom(const TestMessage_MapUint32StringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapUint32StringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[2];
}
void TestMessage_MapUint32StringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestMessage_MapUint64StringEntry_DoNotUse::TestMessage_MapUint64StringEntry_DoNotUse() {}
TestMessage_MapUint64StringEntry_DoNotUse::TestMessage_MapUint64StringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapUint64StringEntry_DoNotUse::MergeFrom(const TestMessage_MapUint64StringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapUint64StringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[3];
}
void TestMessage_MapUint64StringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestMessage_MapBoolStringEntry_DoNotUse::TestMessage_MapBoolStringEntry_DoNotUse() {}
TestMessage_MapBoolStringEntry_DoNotUse::TestMessage_MapBoolStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapBoolStringEntry_DoNotUse::MergeFrom(const TestMessage_MapBoolStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapBoolStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[4];
}
void TestMessage_MapBoolStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestMessage_MapStringStringEntry_DoNotUse::TestMessage_MapStringStringEntry_DoNotUse() {}
TestMessage_MapStringStringEntry_DoNotUse::TestMessage_MapStringStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringStringEntry_DoNotUse::MergeFrom(const TestMessage_MapStringStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapStringStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[5];
}
void TestMessage_MapStringStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestMessage_MapStringMsgEntry_DoNotUse::TestMessage_MapStringMsgEntry_DoNotUse() {}
TestMessage_MapStringMsgEntry_DoNotUse::TestMessage_MapStringMsgEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringMsgEntry_DoNotUse::MergeFrom(const TestMessage_MapStringMsgEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapStringMsgEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[6];
}
void TestMessage_MapStringMsgEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestMessage_MapStringEnumEntry_DoNotUse::TestMessage_MapStringEnumEntry_DoNotUse() {}
TestMessage_MapStringEnumEntry_DoNotUse::TestMessage_MapStringEnumEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringEnumEntry_DoNotUse::MergeFrom(const TestMessage_MapStringEnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapStringEnumEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[7];
}
void TestMessage_MapStringEnumEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestMessage_MapStringInt32Entry_DoNotUse::TestMessage_MapStringInt32Entry_DoNotUse() {}
TestMessage_MapStringInt32Entry_DoNotUse::TestMessage_MapStringInt32Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringInt32Entry_DoNotUse::MergeFrom(const TestMessage_MapStringInt32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapStringInt32Entry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[8];
}
void TestMessage_MapStringInt32Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TestMessage_MapStringBoolEntry_DoNotUse::TestMessage_MapStringBoolEntry_DoNotUse() {}
TestMessage_MapStringBoolEntry_DoNotUse::TestMessage_MapStringBoolEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TestMessage_MapStringBoolEntry_DoNotUse::MergeFrom(const TestMessage_MapStringBoolEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TestMessage_MapStringBoolEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[9];
}
void TestMessage_MapStringBoolEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TestMessage_NestedMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestMessage_NestedMessage::kFooFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestMessage_NestedMessage::TestMessage_NestedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_NestedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:A.B.C.TestMessage.NestedMessage)
}
TestMessage_NestedMessage::TestMessage_NestedMessage(const TestMessage_NestedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  foo_ = from.foo_;
  // @@protoc_insertion_point(copy_constructor:A.B.C.TestMessage.NestedMessage)
}

void TestMessage_NestedMessage::SharedCtor() {
  foo_ = 0;
}

TestMessage_NestedMessage::~TestMessage_NestedMessage() {
  // @@protoc_insertion_point(destructor:A.B.C.TestMessage.NestedMessage)
  SharedDtor();
}

void TestMessage_NestedMessage::SharedDtor() {
}

void TestMessage_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestMessage_NestedMessage::descriptor() {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestMessage_NestedMessage& TestMessage_NestedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage_NestedMessage.base);
  return *internal_default_instance();
}


void TestMessage_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:A.B.C.TestMessage.NestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foo_ = 0;
  _internal_metadata_.Clear();
}

bool TestMessage_NestedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:A.B.C.TestMessage.NestedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 foo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:A.B.C.TestMessage.NestedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:A.B.C.TestMessage.NestedMessage)
  return false;
#undef DO_
}

void TestMessage_NestedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:A.B.C.TestMessage.NestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 foo = 1;
  if (this->foo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->foo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:A.B.C.TestMessage.NestedMessage)
}

::google::protobuf::uint8* TestMessage_NestedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:A.B.C.TestMessage.NestedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 foo = 1;
  if (this->foo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->foo(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A.B.C.TestMessage.NestedMessage)
  return target;
}

size_t TestMessage_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A.B.C.TestMessage.NestedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 foo = 1;
  if (this->foo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->foo());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessage_NestedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A.B.C.TestMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessage_NestedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMessage_NestedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A.B.C.TestMessage.NestedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A.B.C.TestMessage.NestedMessage)
    MergeFrom(*source);
  }
}

void TestMessage_NestedMessage::MergeFrom(const TestMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A.B.C.TestMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.foo() != 0) {
    set_foo(from.foo());
  }
}

void TestMessage_NestedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A.B.C.TestMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage_NestedMessage::CopyFrom(const TestMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A.B.C.TestMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage_NestedMessage::IsInitialized() const {
  return true;
}

void TestMessage_NestedMessage::Swap(TestMessage_NestedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestMessage_NestedMessage::InternalSwap(TestMessage_NestedMessage* other) {
  using std::swap;
  swap(foo_, other->foo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestMessage_NestedMessage::GetMetadata() const {
  protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestMessage::InitAsDefaultInstance() {
  ::A::B::C::_TestMessage_default_instance_._instance.get_mutable()->optional_msg_ = const_cast< ::A::B::C::TestMessage*>(
      ::A::B::C::TestMessage::internal_default_instance());
  ::A::B::C::_TestMessage_default_instance_.oneof_int32_ = 0;
  ::A::B::C::_TestMessage_default_instance_.oneof_int64_ = GOOGLE_LONGLONG(0);
  ::A::B::C::_TestMessage_default_instance_.oneof_uint32_ = 0u;
  ::A::B::C::_TestMessage_default_instance_.oneof_uint64_ = GOOGLE_ULONGLONG(0);
  ::A::B::C::_TestMessage_default_instance_.oneof_bool_ = false;
  ::A::B::C::_TestMessage_default_instance_.oneof_double_ = 0;
  ::A::B::C::_TestMessage_default_instance_.oneof_float_ = 0;
  ::A::B::C::_TestMessage_default_instance_.oneof_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::A::B::C::_TestMessage_default_instance_.oneof_bytes_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::A::B::C::_TestMessage_default_instance_.oneof_enum_ = 0;
  ::A::B::C::_TestMessage_default_instance_.oneof_msg_ = const_cast< ::A::B::C::TestMessage*>(
      ::A::B::C::TestMessage::internal_default_instance());
  ::A::B::C::_TestMessage_default_instance_._instance.get_mutable()->nested_message_ = const_cast< ::A::B::C::TestMessage_NestedMessage*>(
      ::A::B::C::TestMessage_NestedMessage::internal_default_instance());
}
void TestMessage::set_allocated_oneof_msg(::A::B::C::TestMessage* oneof_msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_my_oneof();
  if (oneof_msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oneof_msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oneof_msg, submessage_arena);
    }
    set_has_oneof_msg();
    my_oneof_.oneof_msg_ = oneof_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:A.B.C.TestMessage.oneof_msg)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestMessage::kOptionalInt32FieldNumber;
const int TestMessage::kOptionalInt64FieldNumber;
const int TestMessage::kOptionalUint32FieldNumber;
const int TestMessage::kOptionalUint64FieldNumber;
const int TestMessage::kOptionalBoolFieldNumber;
const int TestMessage::kOptionalDoubleFieldNumber;
const int TestMessage::kOptionalFloatFieldNumber;
const int TestMessage::kOptionalStringFieldNumber;
const int TestMessage::kOptionalBytesFieldNumber;
const int TestMessage::kOptionalEnumFieldNumber;
const int TestMessage::kOptionalMsgFieldNumber;
const int TestMessage::kRepeatedInt32FieldNumber;
const int TestMessage::kRepeatedInt64FieldNumber;
const int TestMessage::kRepeatedUint32FieldNumber;
const int TestMessage::kRepeatedUint64FieldNumber;
const int TestMessage::kRepeatedBoolFieldNumber;
const int TestMessage::kRepeatedDoubleFieldNumber;
const int TestMessage::kRepeatedFloatFieldNumber;
const int TestMessage::kRepeatedStringFieldNumber;
const int TestMessage::kRepeatedBytesFieldNumber;
const int TestMessage::kRepeatedEnumFieldNumber;
const int TestMessage::kRepeatedMsgFieldNumber;
const int TestMessage::kOneofInt32FieldNumber;
const int TestMessage::kOneofInt64FieldNumber;
const int TestMessage::kOneofUint32FieldNumber;
const int TestMessage::kOneofUint64FieldNumber;
const int TestMessage::kOneofBoolFieldNumber;
const int TestMessage::kOneofDoubleFieldNumber;
const int TestMessage::kOneofFloatFieldNumber;
const int TestMessage::kOneofStringFieldNumber;
const int TestMessage::kOneofBytesFieldNumber;
const int TestMessage::kOneofEnumFieldNumber;
const int TestMessage::kOneofMsgFieldNumber;
const int TestMessage::kMapInt32StringFieldNumber;
const int TestMessage::kMapInt64StringFieldNumber;
const int TestMessage::kMapUint32StringFieldNumber;
const int TestMessage::kMapUint64StringFieldNumber;
const int TestMessage::kMapBoolStringFieldNumber;
const int TestMessage::kMapStringStringFieldNumber;
const int TestMessage::kMapStringMsgFieldNumber;
const int TestMessage::kMapStringEnumFieldNumber;
const int TestMessage::kMapStringInt32FieldNumber;
const int TestMessage::kMapStringBoolFieldNumber;
const int TestMessage::kNestedMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestMessage::TestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:A.B.C.TestMessage)
}
TestMessage::TestMessage(const TestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_bool_(from.repeated_bool_),
      repeated_double_(from.repeated_double_),
      repeated_float_(from.repeated_float_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_enum_(from.repeated_enum_),
      repeated_msg_(from.repeated_msg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_int32_string_.MergeFrom(from.map_int32_string_);
  map_int64_string_.MergeFrom(from.map_int64_string_);
  map_uint32_string_.MergeFrom(from.map_uint32_string_);
  map_uint64_string_.MergeFrom(from.map_uint64_string_);
  map_bool_string_.MergeFrom(from.map_bool_string_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_string_msg_.MergeFrom(from.map_string_msg_);
  map_string_enum_.MergeFrom(from.map_string_enum_);
  map_string_int32_.MergeFrom(from.map_string_int32_);
  map_string_bool_.MergeFrom(from.map_string_bool_);
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_string().size() > 0) {
    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
  optional_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optional_bytes().size() > 0) {
    optional_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_bytes_);
  }
  if (from.has_optional_msg()) {
    optional_msg_ = new ::A::B::C::TestMessage(*from.optional_msg_);
  } else {
    optional_msg_ = NULL;
  }
  if (from.has_nested_message()) {
    nested_message_ = new ::A::B::C::TestMessage_NestedMessage(*from.nested_message_);
  } else {
    nested_message_ = NULL;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_enum_) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_enum_));
  clear_has_my_oneof();
  switch (from.my_oneof_case()) {
    case kOneofInt32: {
      set_oneof_int32(from.oneof_int32());
      break;
    }
    case kOneofInt64: {
      set_oneof_int64(from.oneof_int64());
      break;
    }
    case kOneofUint32: {
      set_oneof_uint32(from.oneof_uint32());
      break;
    }
    case kOneofUint64: {
      set_oneof_uint64(from.oneof_uint64());
      break;
    }
    case kOneofBool: {
      set_oneof_bool(from.oneof_bool());
      break;
    }
    case kOneofDouble: {
      set_oneof_double(from.oneof_double());
      break;
    }
    case kOneofFloat: {
      set_oneof_float(from.oneof_float());
      break;
    }
    case kOneofString: {
      set_oneof_string(from.oneof_string());
      break;
    }
    case kOneofBytes: {
      set_oneof_bytes(from.oneof_bytes());
      break;
    }
    case kOneofEnum: {
      set_oneof_enum(from.oneof_enum());
      break;
    }
    case kOneofMsg: {
      mutable_oneof_msg()->::A::B::C::TestMessage::MergeFrom(from.oneof_msg());
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:A.B.C.TestMessage)
}

void TestMessage::SharedCtor() {
  optional_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_enum_) -
      reinterpret_cast<char*>(&optional_msg_)) + sizeof(optional_enum_));
  clear_has_my_oneof();
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:A.B.C.TestMessage)
  SharedDtor();
}

void TestMessage::SharedDtor() {
  optional_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optional_msg_;
  if (this != internal_default_instance()) delete nested_message_;
  if (has_my_oneof()) {
    clear_my_oneof();
  }
}

void TestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestMessage::descriptor() {
  ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestMessage& TestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::scc_info_TestMessage.base);
  return *internal_default_instance();
}


void TestMessage::clear_my_oneof() {
// @@protoc_insertion_point(one_of_clear_start:A.B.C.TestMessage)
  switch (my_oneof_case()) {
    case kOneofInt32: {
      // No need to clear
      break;
    }
    case kOneofInt64: {
      // No need to clear
      break;
    }
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofUint64: {
      // No need to clear
      break;
    }
    case kOneofBool: {
      // No need to clear
      break;
    }
    case kOneofDouble: {
      // No need to clear
      break;
    }
    case kOneofFloat: {
      // No need to clear
      break;
    }
    case kOneofString: {
      my_oneof_.oneof_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOneofBytes: {
      my_oneof_.oneof_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case kOneofMsg: {
      delete my_oneof_.oneof_msg_;
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MY_ONEOF_NOT_SET;
}


void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:A.B.C.TestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_bool_.Clear();
  repeated_double_.Clear();
  repeated_float_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_enum_.Clear();
  repeated_msg_.Clear();
  map_int32_string_.Clear();
  map_int64_string_.Clear();
  map_uint32_string_.Clear();
  map_uint64_string_.Clear();
  map_bool_string_.Clear();
  map_string_string_.Clear();
  map_string_msg_.Clear();
  map_string_enum_.Clear();
  map_string_int32_.Clear();
  map_string_bool_.Clear();
  optional_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && optional_msg_ != NULL) {
    delete optional_msg_;
  }
  optional_msg_ = NULL;
  if (GetArenaNoVirtual() == NULL && nested_message_ != NULL) {
    delete nested_message_;
  }
  nested_message_ = NULL;
  ::memset(&optional_int64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_enum_) -
      reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_enum_));
  clear_my_oneof();
  _internal_metadata_.Clear();
}

bool TestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:A.B.C.TestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 optional_int32 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 optional_int64 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 optional_uint32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optional_uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 optional_uint64 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &optional_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool optional_bool = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double optional_double = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optional_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float optional_float = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &optional_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string optional_string = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optional_string().data(), static_cast<int>(this->optional_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.optional_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes optional_bytes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_optional_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .A.B.C.TestEnum optional_enum = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_optional_enum(static_cast< ::A::B::C::TestEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .A.B.C.TestMessage optional_msg = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_optional_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 repeated_int32 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_repeated_int32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 170u, input, this->mutable_repeated_int32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 repeated_int64 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_repeated_int64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 178u, input, this->mutable_repeated_int64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 repeated_uint32 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_repeated_uint32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 186u, input, this->mutable_repeated_uint32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 repeated_uint64 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_repeated_uint64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 194u, input, this->mutable_repeated_uint64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool repeated_bool = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_repeated_bool())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 202u, input, this->mutable_repeated_bool())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double repeated_double = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_repeated_double())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 210u, input, this->mutable_repeated_double())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float repeated_float = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_repeated_float())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 218u, input, this->mutable_repeated_float())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string repeated_string = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repeated_string(this->repeated_string_size() - 1).data(),
            static_cast<int>(this->repeated_string(this->repeated_string_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.repeated_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes repeated_bytes = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_repeated_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .A.B.C.TestEnum repeated_enum = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_repeated_enum(static_cast< ::A::B::C::TestEnum >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_repeated_enum(static_cast< ::A::B::C::TestEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .A.B.C.TestMessage repeated_msg = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_repeated_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 oneof_int32 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_oneof_.oneof_int32_)));
          set_has_oneof_int32();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 oneof_int64 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &my_oneof_.oneof_int64_)));
          set_has_oneof_int64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 oneof_uint32 = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_oneof_.oneof_uint32_)));
          set_has_oneof_uint32();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 oneof_uint64 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_oneof_.oneof_uint64_)));
          set_has_oneof_uint64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool oneof_bool = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &my_oneof_.oneof_bool_)));
          set_has_oneof_bool();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double oneof_double = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 369 & 0xFF */)) {
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &my_oneof_.oneof_double_)));
          set_has_oneof_double();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float oneof_float = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 381 & 0xFF */)) {
          clear_my_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &my_oneof_.oneof_float_)));
          set_has_oneof_float();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string oneof_string = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oneof_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oneof_string().data(), static_cast<int>(this->oneof_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.oneof_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes oneof_bytes = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oneof_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .A.B.C.TestEnum oneof_enum = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oneof_enum(static_cast< ::A::B::C::TestEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .A.B.C.TestMessage oneof_msg = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oneof_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, string> map_int32_string = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          TestMessage_MapInt32StringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapInt32StringEntry_DoNotUse,
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&map_int32_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapInt32StringEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, string> map_int64_string = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 498 & 0xFF */)) {
          TestMessage_MapInt64StringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapInt64StringEntry_DoNotUse,
              ::google::protobuf::int64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::std::string > > parser(&map_int64_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapInt64StringEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, string> map_uint32_string = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 506 & 0xFF */)) {
          TestMessage_MapUint32StringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapUint32StringEntry_DoNotUse,
              ::google::protobuf::uint32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string > > parser(&map_uint32_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapUint32StringEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, string> map_uint64_string = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 514 & 0xFF */)) {
          TestMessage_MapUint64StringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapUint64StringEntry_DoNotUse,
              ::google::protobuf::uint64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string > > parser(&map_uint64_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapUint64StringEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<bool, string> map_bool_string = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 522 & 0xFF */)) {
          TestMessage_MapBoolStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapBoolStringEntry_DoNotUse,
              bool, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< bool, ::std::string > > parser(&map_bool_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapBoolStringEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> map_string_string = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 530 & 0xFF */)) {
          TestMessage_MapStringStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapStringStringEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&map_string_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringStringEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringStringEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .A.B.C.TestMessage> map_string_msg = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 538 & 0xFF */)) {
          TestMessage_MapStringMsgEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapStringMsgEntry_DoNotUse,
              ::std::string, ::A::B::C::TestMessage,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage > > parser(&map_string_msg_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringMsgEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .A.B.C.TestEnum> map_string_enum = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 546 & 0xFF */)) {
          TestMessage_MapStringEnumEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapStringEnumEntry_DoNotUse,
              ::std::string, ::A::B::C::TestEnum,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum > > parser(&map_string_enum_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringEnumEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> map_string_int32 = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 554 & 0xFF */)) {
          TestMessage_MapStringInt32Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapStringInt32Entry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&map_string_int32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringInt32Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bool> map_string_bool = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 562 & 0xFF */)) {
          TestMessage_MapStringBoolEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TestMessage_MapStringBoolEntry_DoNotUse,
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&map_string_bool_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "A.B.C.TestMessage.MapStringBoolEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .A.B.C.TestMessage.NestedMessage nested_message = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:A.B.C.TestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:A.B.C.TestMessage)
  return false;
#undef DO_
}

void TestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:A.B.C.TestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optional_int32(), output);
  }

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->optional_int64(), output);
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->optional_uint32(), output);
  }

  // uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->optional_uint64(), output);
  }

  // bool optional_bool = 5;
  if (this->optional_bool() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->optional_bool(), output);
  }

  // double optional_double = 6;
  if (this->optional_double() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->optional_double(), output);
  }

  // float optional_float = 7;
  if (this->optional_float() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->optional_float(), output);
  }

  // string optional_string = 8;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), static_cast<int>(this->optional_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.optional_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->optional_string(), output);
  }

  // bytes optional_bytes = 9;
  if (this->optional_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->optional_bytes(), output);
  }

  // .A.B.C.TestEnum optional_enum = 10;
  if (this->optional_enum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->optional_enum(), output);
  }

  // .A.B.C.TestMessage optional_msg = 11;
  if (this->has_optional_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_optional_msg(), output);
  }

  // repeated int32 repeated_int32 = 21;
  if (this->repeated_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(21, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_int32_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_int32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->repeated_int32(i), output);
  }

  // repeated int64 repeated_int64 = 22;
  if (this->repeated_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_int64_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_int64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->repeated_int64(i), output);
  }

  // repeated uint32 repeated_uint32 = 23;
  if (this->repeated_uint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_uint32_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_uint32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->repeated_uint32(i), output);
  }

  // repeated uint64 repeated_uint64 = 24;
  if (this->repeated_uint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_uint64_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_uint64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->repeated_uint64(i), output);
  }

  // repeated bool repeated_bool = 25;
  if (this->repeated_bool_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(25, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_bool_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->repeated_bool().data(), this->repeated_bool_size(), output);
  }

  // repeated double repeated_double = 26;
  if (this->repeated_double_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(26, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_double_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->repeated_double().data(), this->repeated_double_size(), output);
  }

  // repeated float repeated_float = 27;
  if (this->repeated_float_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(27, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _repeated_float_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->repeated_float().data(), this->repeated_float_size(), output);
  }

  // repeated string repeated_string = 28;
  for (int i = 0, n = this->repeated_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_string(i).data(), static_cast<int>(this->repeated_string(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.repeated_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->repeated_string(i), output);
  }

  // repeated bytes repeated_bytes = 29;
  for (int i = 0, n = this->repeated_bytes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      29, this->repeated_bytes(i), output);
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  if (this->repeated_enum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      30,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_repeated_enum_cached_byte_size_));
  }
  for (int i = 0, n = this->repeated_enum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->repeated_enum(i), output);
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_msg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31,
      this->repeated_msg(static_cast<int>(i)),
      output);
  }

  // int32 oneof_int32 = 41;
  if (has_oneof_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->oneof_int32(), output);
  }

  // int64 oneof_int64 = 42;
  if (has_oneof_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->oneof_int64(), output);
  }

  // uint32 oneof_uint32 = 43;
  if (has_oneof_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->oneof_uint32(), output);
  }

  // uint64 oneof_uint64 = 44;
  if (has_oneof_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->oneof_uint64(), output);
  }

  // bool oneof_bool = 45;
  if (has_oneof_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->oneof_bool(), output);
  }

  // double oneof_double = 46;
  if (has_oneof_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->oneof_double(), output);
  }

  // float oneof_float = 47;
  if (has_oneof_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->oneof_float(), output);
  }

  // string oneof_string = 48;
  if (has_oneof_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oneof_string().data(), static_cast<int>(this->oneof_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.oneof_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->oneof_string(), output);
  }

  // bytes oneof_bytes = 49;
  if (has_oneof_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      49, this->oneof_bytes(), output);
  }

  // .A.B.C.TestEnum oneof_enum = 50;
  if (has_oneof_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->oneof_enum(), output);
  }

  // .A.B.C.TestMessage oneof_msg = 51;
  if (has_oneof_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->_internal_oneof_msg(), output);
  }

  // map<int32, string> map_int32_string = 61;
  if (!this->map_int32_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt32StringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_int32_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int32_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_int32_string().begin();
          it != this->map_int32_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapInt32StringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int32_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            61, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapInt32StringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_int32_string().begin();
          it != this->map_int32_string().end(); ++it) {
        entry.reset(map_int32_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            61, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> map_int64_string = 62;
  if (!this->map_int64_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt64StringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_int64_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int64_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_string().begin();
          it != this->map_int64_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapInt64StringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            62, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapInt64StringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_string().begin();
          it != this->map_int64_string().end(); ++it) {
        entry.reset(map_int64_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            62, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint32, string> map_uint32_string = 63;
  if (!this->map_uint32_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint32StringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_uint32_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_uint32_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->map_uint32_string().begin();
          it != this->map_uint32_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapUint32StringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_uint32_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            63, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapUint32StringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->map_uint32_string().begin();
          it != this->map_uint32_string().end(); ++it) {
        entry.reset(map_uint32_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            63, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint64, string> map_uint64_string = 64;
  if (!this->map_uint64_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint64StringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_uint64_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_uint64_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->map_uint64_string().begin();
          it != this->map_uint64_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapUint64StringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_uint64_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            64, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapUint64StringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->map_uint64_string().begin();
          it != this->map_uint64_string().end(); ++it) {
        entry.reset(map_uint64_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            64, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<bool, string> map_bool_string = 65;
  if (!this->map_bool_string().empty()) {
    typedef ::google::protobuf::Map< bool, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapBoolStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_bool_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_bool_string().size()]);
      typedef ::google::protobuf::Map< bool, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map_bool_string().begin();
          it != this->map_bool_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapBoolStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_bool_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            65, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapBoolStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map_bool_string().begin();
          it != this->map_bool_string().end(); ++it) {
        entry.reset(map_bool_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            65, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> map_string_string = 66;
  if (!this->map_string_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_string_string().begin();
          it != this->map_string_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            66, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_string_string().begin();
          it != this->map_string_string().end(); ++it) {
        entry.reset(map_string_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            66, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .A.B.C.TestMessage> map_string_msg = 67;
  if (!this->map_string_msg().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringMsgEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_msg().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_msg().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
          it = this->map_string_msg().begin();
          it != this->map_string_msg().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringMsgEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_msg_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            67, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringMsgEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
          it = this->map_string_msg().begin();
          it != this->map_string_msg().end(); ++it) {
        entry.reset(map_string_msg_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            67, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .A.B.C.TestEnum> map_string_enum = 68;
  if (!this->map_string_enum().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringEnumEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_enum().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_enum().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
          it = this->map_string_enum().begin();
          it != this->map_string_enum().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringEnumEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_enum_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            68, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringEnumEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
          it = this->map_string_enum().begin();
          it != this->map_string_enum().end(); ++it) {
        entry.reset(map_string_enum_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            68, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> map_string_int32 = 69;
  if (!this->map_string_int32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringInt32Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_int32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_int32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->map_string_int32().begin();
          it != this->map_string_int32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringInt32Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_int32_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            69, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringInt32Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->map_string_int32().begin();
          it != this->map_string_int32().end(); ++it) {
        entry.reset(map_string_int32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            69, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bool> map_string_bool = 70;
  if (!this->map_string_bool().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringBoolEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_string_bool().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_bool().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->map_string_bool().begin();
          it != this->map_string_bool().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringBoolEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_bool_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            70, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringBoolEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->map_string_bool().begin();
          it != this->map_string_bool().end(); ++it) {
        entry.reset(map_string_bool_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            70, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if (this->has_nested_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->_internal_nested_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:A.B.C.TestMessage)
}

::google::protobuf::uint8* TestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:A.B.C.TestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optional_int32(), target);
  }

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->optional_int64(), target);
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->optional_uint32(), target);
  }

  // uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->optional_uint64(), target);
  }

  // bool optional_bool = 5;
  if (this->optional_bool() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->optional_bool(), target);
  }

  // double optional_double = 6;
  if (this->optional_double() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->optional_double(), target);
  }

  // float optional_float = 7;
  if (this->optional_float() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->optional_float(), target);
  }

  // string optional_string = 8;
  if (this->optional_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optional_string().data(), static_cast<int>(this->optional_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.optional_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->optional_string(), target);
  }

  // bytes optional_bytes = 9;
  if (this->optional_bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->optional_bytes(), target);
  }

  // .A.B.C.TestEnum optional_enum = 10;
  if (this->optional_enum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->optional_enum(), target);
  }

  // .A.B.C.TestMessage optional_msg = 11;
  if (this->has_optional_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_optional_msg(), deterministic, target);
  }

  // repeated int32 repeated_int32 = 21;
  if (this->repeated_int32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_int32_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->repeated_int32_, target);
  }

  // repeated int64 repeated_int64 = 22;
  if (this->repeated_int64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_int64_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->repeated_int64_, target);
  }

  // repeated uint32 repeated_uint32 = 23;
  if (this->repeated_uint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_uint32_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->repeated_uint32_, target);
  }

  // repeated uint64 repeated_uint64 = 24;
  if (this->repeated_uint64_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_uint64_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->repeated_uint64_, target);
  }

  // repeated bool repeated_bool = 25;
  if (this->repeated_bool_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      25,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_bool_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->repeated_bool_, target);
  }

  // repeated double repeated_double = 26;
  if (this->repeated_double_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      26,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_double_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->repeated_double_, target);
  }

  // repeated float repeated_float = 27;
  if (this->repeated_float_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      27,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _repeated_float_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->repeated_float_, target);
  }

  // repeated string repeated_string = 28;
  for (int i = 0, n = this->repeated_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repeated_string(i).data(), static_cast<int>(this->repeated_string(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.repeated_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(28, this->repeated_string(i), target);
  }

  // repeated bytes repeated_bytes = 29;
  for (int i = 0, n = this->repeated_bytes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(29, this->repeated_bytes(i), target);
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  if (this->repeated_enum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      30,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _repeated_enum_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->repeated_enum_, target);
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_msg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->repeated_msg(static_cast<int>(i)), deterministic, target);
  }

  // int32 oneof_int32 = 41;
  if (has_oneof_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->oneof_int32(), target);
  }

  // int64 oneof_int64 = 42;
  if (has_oneof_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->oneof_int64(), target);
  }

  // uint32 oneof_uint32 = 43;
  if (has_oneof_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->oneof_uint32(), target);
  }

  // uint64 oneof_uint64 = 44;
  if (has_oneof_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->oneof_uint64(), target);
  }

  // bool oneof_bool = 45;
  if (has_oneof_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->oneof_bool(), target);
  }

  // double oneof_double = 46;
  if (has_oneof_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->oneof_double(), target);
  }

  // float oneof_float = 47;
  if (has_oneof_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->oneof_float(), target);
  }

  // string oneof_string = 48;
  if (has_oneof_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oneof_string().data(), static_cast<int>(this->oneof_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "A.B.C.TestMessage.oneof_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->oneof_string(), target);
  }

  // bytes oneof_bytes = 49;
  if (has_oneof_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        49, this->oneof_bytes(), target);
  }

  // .A.B.C.TestEnum oneof_enum = 50;
  if (has_oneof_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->oneof_enum(), target);
  }

  // .A.B.C.TestMessage oneof_msg = 51;
  if (has_oneof_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, this->_internal_oneof_msg(), deterministic, target);
  }

  // map<int32, string> map_int32_string = 61;
  if (!this->map_int32_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt32StringEntry.value");
      }
    };

    if (deterministic &&
        this->map_int32_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int32_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_int32_string().begin();
          it != this->map_int32_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapInt32StringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int32_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       61, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapInt32StringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_int32_string().begin();
          it != this->map_int32_string().end(); ++it) {
        entry.reset(map_int32_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       61, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> map_int64_string = 62;
  if (!this->map_int64_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapInt64StringEntry.value");
      }
    };

    if (deterministic &&
        this->map_int64_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_int64_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_string().begin();
          it != this->map_int64_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapInt64StringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_int64_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       62, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapInt64StringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->map_int64_string().begin();
          it != this->map_int64_string().end(); ++it) {
        entry.reset(map_int64_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       62, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint32, string> map_uint32_string = 63;
  if (!this->map_uint32_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint32StringEntry.value");
      }
    };

    if (deterministic &&
        this->map_uint32_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_uint32_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->map_uint32_string().begin();
          it != this->map_uint32_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapUint32StringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_uint32_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       63, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapUint32StringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->map_uint32_string().begin();
          it != this->map_uint32_string().end(); ++it) {
        entry.reset(map_uint32_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       63, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint64, string> map_uint64_string = 64;
  if (!this->map_uint64_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapUint64StringEntry.value");
      }
    };

    if (deterministic &&
        this->map_uint64_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_uint64_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->map_uint64_string().begin();
          it != this->map_uint64_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapUint64StringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_uint64_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       64, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapUint64StringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->map_uint64_string().begin();
          it != this->map_uint64_string().end(); ++it) {
        entry.reset(map_uint64_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       64, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<bool, string> map_bool_string = 65;
  if (!this->map_bool_string().empty()) {
    typedef ::google::protobuf::Map< bool, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapBoolStringEntry.value");
      }
    };

    if (deterministic &&
        this->map_bool_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_bool_string().size()]);
      typedef ::google::protobuf::Map< bool, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map_bool_string().begin();
          it != this->map_bool_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapBoolStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_bool_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       65, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapBoolStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map_bool_string().begin();
          it != this->map_bool_string().end(); ++it) {
        entry.reset(map_bool_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       65, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> map_string_string = 66;
  if (!this->map_string_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringStringEntry.value");
      }
    };

    if (deterministic &&
        this->map_string_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_string_string().begin();
          it != this->map_string_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       66, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_string_string().begin();
          it != this->map_string_string().end(); ++it) {
        entry.reset(map_string_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       66, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .A.B.C.TestMessage> map_string_msg = 67;
  if (!this->map_string_msg().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringMsgEntry.key");
      }
    };

    if (deterministic &&
        this->map_string_msg().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_msg().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
          it = this->map_string_msg().begin();
          it != this->map_string_msg().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringMsgEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_msg_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       67, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringMsgEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
          it = this->map_string_msg().begin();
          it != this->map_string_msg().end(); ++it) {
        entry.reset(map_string_msg_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       67, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .A.B.C.TestEnum> map_string_enum = 68;
  if (!this->map_string_enum().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringEnumEntry.key");
      }
    };

    if (deterministic &&
        this->map_string_enum().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_enum().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
          it = this->map_string_enum().begin();
          it != this->map_string_enum().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringEnumEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_enum_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       68, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringEnumEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
          it = this->map_string_enum().begin();
          it != this->map_string_enum().end(); ++it) {
        entry.reset(map_string_enum_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       68, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> map_string_int32 = 69;
  if (!this->map_string_int32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringInt32Entry.key");
      }
    };

    if (deterministic &&
        this->map_string_int32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_int32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->map_string_int32().begin();
          it != this->map_string_int32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringInt32Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_int32_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       69, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringInt32Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->map_string_int32().begin();
          it != this->map_string_int32().end(); ++it) {
        entry.reset(map_string_int32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       69, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bool> map_string_bool = 70;
  if (!this->map_string_bool().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "A.B.C.TestMessage.MapStringBoolEntry.key");
      }
    };

    if (deterministic &&
        this->map_string_bool().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_string_bool().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->map_string_bool().begin();
          it != this->map_string_bool().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TestMessage_MapStringBoolEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_string_bool_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       70, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<TestMessage_MapStringBoolEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->map_string_bool().begin();
          it != this->map_string_bool().end(); ++it) {
        entry.reset(map_string_bool_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       70, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if (this->has_nested_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        80, this->_internal_nested_message(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:A.B.C.TestMessage)
  return target;
}

size_t TestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:A.B.C.TestMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 repeated_int32 = 21;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_int64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 23;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_uint32_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 24;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_uint64_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool repeated_bool = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_bool_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double repeated_double = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_double_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float repeated_float = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_float_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string repeated_string = 28;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->repeated_string_size());
  for (int i = 0, n = this->repeated_string_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_string(i));
  }

  // repeated bytes repeated_bytes = 29;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->repeated_bytes_size());
  for (int i = 0, n = this->repeated_bytes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->repeated_bytes(i));
  }

  // repeated .A.B.C.TestEnum repeated_enum = 30;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->repeated_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->repeated_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _repeated_enum_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .A.B.C.TestMessage repeated_msg = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_msg_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->repeated_msg(static_cast<int>(i)));
    }
  }

  // map<int32, string> map_int32_string = 61;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_int32_string_size());
  {
    ::std::unique_ptr<TestMessage_MapInt32StringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->map_int32_string().begin();
        it != this->map_int32_string().end(); ++it) {
      entry.reset(map_int32_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, string> map_int64_string = 62;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_int64_string_size());
  {
    ::std::unique_ptr<TestMessage_MapInt64StringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
        it = this->map_int64_string().begin();
        it != this->map_int64_string().end(); ++it) {
      entry.reset(map_int64_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, string> map_uint32_string = 63;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_uint32_string_size());
  {
    ::std::unique_ptr<TestMessage_MapUint32StringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->map_uint32_string().begin();
        it != this->map_uint32_string().end(); ++it) {
      entry.reset(map_uint32_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint64, string> map_uint64_string = 64;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_uint64_string_size());
  {
    ::std::unique_ptr<TestMessage_MapUint64StringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
        it = this->map_uint64_string().begin();
        it != this->map_uint64_string().end(); ++it) {
      entry.reset(map_uint64_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<bool, string> map_bool_string = 65;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_bool_string_size());
  {
    ::std::unique_ptr<TestMessage_MapBoolStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< bool, ::std::string >::const_iterator
        it = this->map_bool_string().begin();
        it != this->map_bool_string().end(); ++it) {
      entry.reset(map_bool_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> map_string_string = 66;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_string_string_size());
  {
    ::std::unique_ptr<TestMessage_MapStringStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->map_string_string().begin();
        it != this->map_string_string().end(); ++it) {
      entry.reset(map_string_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .A.B.C.TestMessage> map_string_msg = 67;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_string_msg_size());
  {
    ::std::unique_ptr<TestMessage_MapStringMsgEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::A::B::C::TestMessage >::const_iterator
        it = this->map_string_msg().begin();
        it != this->map_string_msg().end(); ++it) {
      entry.reset(map_string_msg_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .A.B.C.TestEnum> map_string_enum = 68;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_string_enum_size());
  {
    ::std::unique_ptr<TestMessage_MapStringEnumEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::A::B::C::TestEnum >::const_iterator
        it = this->map_string_enum().begin();
        it != this->map_string_enum().end(); ++it) {
      entry.reset(map_string_enum_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int32> map_string_int32 = 69;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_string_int32_size());
  {
    ::std::unique_ptr<TestMessage_MapStringInt32Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->map_string_int32().begin();
        it != this->map_string_int32().end(); ++it) {
      entry.reset(map_string_int32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, bool> map_string_bool = 70;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->map_string_bool_size());
  {
    ::std::unique_ptr<TestMessage_MapStringBoolEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->map_string_bool().begin();
        it != this->map_string_bool().end(); ++it) {
      entry.reset(map_string_bool_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string optional_string = 8;
  if (this->optional_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optional_string());
  }

  // bytes optional_bytes = 9;
  if (this->optional_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->optional_bytes());
  }

  // .A.B.C.TestMessage optional_msg = 11;
  if (this->has_optional_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *optional_msg_);
  }

  // .A.B.C.TestMessage.NestedMessage nested_message = 80;
  if (this->has_nested_message()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *nested_message_);
  }

  // int64 optional_int64 = 2;
  if (this->optional_int64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->optional_int64());
  }

  // int32 optional_int32 = 1;
  if (this->optional_int32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optional_int32());
  }

  // uint32 optional_uint32 = 3;
  if (this->optional_uint32() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->optional_uint32());
  }

  // uint64 optional_uint64 = 4;
  if (this->optional_uint64() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->optional_uint64());
  }

  // double optional_double = 6;
  if (this->optional_double() != 0) {
    total_size += 1 + 8;
  }

  // bool optional_bool = 5;
  if (this->optional_bool() != 0) {
    total_size += 1 + 1;
  }

  // float optional_float = 7;
  if (this->optional_float() != 0) {
    total_size += 1 + 4;
  }

  // .A.B.C.TestEnum optional_enum = 10;
  if (this->optional_enum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optional_enum());
  }

  switch (my_oneof_case()) {
    // int32 oneof_int32 = 41;
    case kOneofInt32: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oneof_int32());
      break;
    }
    // int64 oneof_int64 = 42;
    case kOneofInt64: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oneof_int64());
      break;
    }
    // uint32 oneof_uint32 = 43;
    case kOneofUint32: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oneof_uint32());
      break;
    }
    // uint64 oneof_uint64 = 44;
    case kOneofUint64: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->oneof_uint64());
      break;
    }
    // bool oneof_bool = 45;
    case kOneofBool: {
      total_size += 2 + 1;
      break;
    }
    // double oneof_double = 46;
    case kOneofDouble: {
      total_size += 2 + 8;
      break;
    }
    // float oneof_float = 47;
    case kOneofFloat: {
      total_size += 2 + 4;
      break;
    }
    // string oneof_string = 48;
    case kOneofString: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oneof_string());
      break;
    }
    // bytes oneof_bytes = 49;
    case kOneofBytes: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oneof_bytes());
      break;
    }
    // .A.B.C.TestEnum oneof_enum = 50;
    case kOneofEnum: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oneof_enum());
      break;
    }
    // .A.B.C.TestMessage oneof_msg = 51;
    case kOneofMsg: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *my_oneof_.oneof_msg_);
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:A.B.C.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:A.B.C.TestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:A.B.C.TestMessage)
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:A.B.C.TestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_enum_.MergeFrom(from.repeated_enum_);
  repeated_msg_.MergeFrom(from.repeated_msg_);
  map_int32_string_.MergeFrom(from.map_int32_string_);
  map_int64_string_.MergeFrom(from.map_int64_string_);
  map_uint32_string_.MergeFrom(from.map_uint32_string_);
  map_uint64_string_.MergeFrom(from.map_uint64_string_);
  map_bool_string_.MergeFrom(from.map_bool_string_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_string_msg_.MergeFrom(from.map_string_msg_);
  map_string_enum_.MergeFrom(from.map_string_enum_);
  map_string_int32_.MergeFrom(from.map_string_int32_);
  map_string_bool_.MergeFrom(from.map_string_bool_);
  if (from.optional_string().size() > 0) {

    optional_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_string_);
  }
  if (from.optional_bytes().size() > 0) {

    optional_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_bytes_);
  }
  if (from.has_optional_msg()) {
    mutable_optional_msg()->::A::B::C::TestMessage::MergeFrom(from.optional_msg());
  }
  if (from.has_nested_message()) {
    mutable_nested_message()->::A::B::C::TestMessage_NestedMessage::MergeFrom(from.nested_message());
  }
  if (from.optional_int64() != 0) {
    set_optional_int64(from.optional_int64());
  }
  if (from.optional_int32() != 0) {
    set_optional_int32(from.optional_int32());
  }
  if (from.optional_uint32() != 0) {
    set_optional_uint32(from.optional_uint32());
  }
  if (from.optional_uint64() != 0) {
    set_optional_uint64(from.optional_uint64());
  }
  if (from.optional_double() != 0) {
    set_optional_double(from.optional_double());
  }
  if (from.optional_bool() != 0) {
    set_optional_bool(from.optional_bool());
  }
  if (from.optional_float() != 0) {
    set_optional_float(from.optional_float());
  }
  if (from.optional_enum() != 0) {
    set_optional_enum(from.optional_enum());
  }
  switch (from.my_oneof_case()) {
    case kOneofInt32: {
      set_oneof_int32(from.oneof_int32());
      break;
    }
    case kOneofInt64: {
      set_oneof_int64(from.oneof_int64());
      break;
    }
    case kOneofUint32: {
      set_oneof_uint32(from.oneof_uint32());
      break;
    }
    case kOneofUint64: {
      set_oneof_uint64(from.oneof_uint64());
      break;
    }
    case kOneofBool: {
      set_oneof_bool(from.oneof_bool());
      break;
    }
    case kOneofDouble: {
      set_oneof_double(from.oneof_double());
      break;
    }
    case kOneofFloat: {
      set_oneof_float(from.oneof_float());
      break;
    }
    case kOneofString: {
      set_oneof_string(from.oneof_string());
      break;
    }
    case kOneofBytes: {
      set_oneof_bytes(from.oneof_bytes());
      break;
    }
    case kOneofEnum: {
      set_oneof_enum(from.oneof_enum());
      break;
    }
    case kOneofMsg: {
      mutable_oneof_msg()->::A::B::C::TestMessage::MergeFrom(from.oneof_msg());
      break;
    }
    case MY_ONEOF_NOT_SET: {
      break;
    }
  }
}

void TestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:A.B.C.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:A.B.C.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  return true;
}

void TestMessage::Swap(TestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestMessage::InternalSwap(TestMessage* other) {
  using std::swap;
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_string_.InternalSwap(CastToBase(&other->repeated_string_));
  repeated_bytes_.InternalSwap(CastToBase(&other->repeated_bytes_));
  repeated_enum_.InternalSwap(&other->repeated_enum_);
  CastToBase(&repeated_msg_)->InternalSwap(CastToBase(&other->repeated_msg_));
  map_int32_string_.Swap(&other->map_int32_string_);
  map_int64_string_.Swap(&other->map_int64_string_);
  map_uint32_string_.Swap(&other->map_uint32_string_);
  map_uint64_string_.Swap(&other->map_uint64_string_);
  map_bool_string_.Swap(&other->map_bool_string_);
  map_string_string_.Swap(&other->map_string_string_);
  map_string_msg_.Swap(&other->map_string_msg_);
  map_string_enum_.Swap(&other->map_string_enum_);
  map_string_int32_.Swap(&other->map_string_int32_);
  map_string_bool_.Swap(&other->map_string_bool_);
  optional_string_.Swap(&other->optional_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  optional_bytes_.Swap(&other->optional_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(optional_msg_, other->optional_msg_);
  swap(nested_message_, other->nested_message_);
  swap(optional_int64_, other->optional_int64_);
  swap(optional_int32_, other->optional_int32_);
  swap(optional_uint32_, other->optional_uint32_);
  swap(optional_uint64_, other->optional_uint64_);
  swap(optional_double_, other->optional_double_);
  swap(optional_bool_, other->optional_bool_);
  swap(optional_float_, other->optional_float_);
  swap(optional_enum_, other->optional_enum_);
  swap(my_oneof_, other->my_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestMessage::GetMetadata() const {
  protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprotobuf_2fcompiler_2fruby_2fruby_5fgenerated_5fcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace C
}  // namespace B
}  // namespace A
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapInt32StringEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapInt64StringEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapUint32StringEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapUint64StringEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapBoolStringEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapStringStringEntry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapStringStringEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapStringMsgEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapStringEnumEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapStringInt32Entry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_MapStringBoolEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage_NestedMessage* Arena::CreateMaybeMessage< ::A::B::C::TestMessage_NestedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage_NestedMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::A::B::C::TestMessage* Arena::CreateMaybeMessage< ::A::B::C::TestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::A::B::C::TestMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
